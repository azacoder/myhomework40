{"version":3,"sources":["store/actions/index.js","store/reducers/reducers.js","store/index.js","components/Link/index.js","containers/FilterLink/index.js","components/Footer/index.js","containers/AddTodo/index.js","components/Todo/index.js","components/TodoList/index.js","containers/VisibleTodoList/index.js","App.js","index.js"],"names":["VisibilityFilters","nextTodoId","addTodo","text","type","id","setVisibilityFilter","filter","toggleTodo","todoApp","combineReducers","visibilityFilter","state","action","todos","completed","map","todo","store","createStore","Link","active","children","onClick","disabled","style","marginLeft","connect","ownProps","dispatch","Footer","className","FilterLink","input","onSubmit","e","preventDefault","value","trim","ref","node","Todo","textDecoration","TodoList","getVisibleTodos","t","Error","App","VisibleTodoList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f408d94.chunk.js","sourcesContent":["/*\n * типы экшенов\n */\n\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\n/*\n * другие константы\n */\n\n// const NOMINAL = [\"USD\", \"SOM\", \"SYM\"];\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * генераторы экшенов\n */\n\nlet nextTodoId = 0\nexport const addTodo = text => ({\n    type: ADD_TODO,\n    id: nextTodoId++,\n    text: text\n})\n\nexport const setVisibilityFilter = filter => ({\n    type: SET_VISIBILITY_FILTER,\n    filter\n})\n\nexport const toggleTodo = id => ({\n    type: TOGGLE_TODO,\n    id\n})","import { combineReducers } from 'redux'\nimport {\n    ADD_TODO,\n    TOGGLE_TODO,\n    SET_VISIBILITY_FILTER,\n    VisibilityFilters\n} from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n    switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n        return action.filter\n      default:\n        return state\n    }\n  }\n\n\nconst todos = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return [\n          ...state,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ]\n      case 'TOGGLE_TODO':\n        return state.map(todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        )\n      default:\n        return state\n    }\n  }\n\nconst todoApp = combineReducers({\n    visibilityFilter,\n    todos\n})\n\nexport default todoApp\n\n/*\n\n    _____ OUR STATE _____\n\n{\n  visibilityFilter: 'SHOW_ALL',\n  todos: [\n    {\n      text: 'Consider using Redux',\n      completed: true,\n    },\n    {\n      text: 'Keep all state in a single tree',\n      completed: false\n    }\n  ]\n}\n*/\n\n// const initialState = {\n//     visibilityFilter: VisibilityFilters.SHOW_ALL,\n//     todos: [\n//         {\n//             text: 'init',\n//             completed: true\n//         }\n//     ]\n// }\n\n/* export default function todoApp(state = {}, action) {\n    return {\n        visibilityFilter: visibilityFilter(state.visibilityFilter, action),\n        todos: todos(state.todos, action)\n    }\n} */\n\n/* function todoApp(state = initialState, action) {\n    switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n            return Object.assign({}, state, {\n                visibilityFilter: action.filter\n            })\n        case ADD_TODO:\n            return Object.assign({}, state, {\n                todos: todos(state.todos, action)\n            })\n        case TOGGLE_TODO:\n            return Object.assign({}, state, {\n                todos: todos(state.todos, action)\n            })\n        default:\n            return state\n    }\n} */\n\n/* Это называется композицией редюсеров и является фундаментальным шаблоном построения Redux-приложений. */\n/* function todos(state = [], action) {\n    switch (action.type) {\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case TOGGLE_TODO:\n            return state.todos.map((todo, index) => {\n                if (index === action.index) {\n                    return Object.assign({}, todo, {\n                        completed: !todo.completed,\n                    })\n                }\n\n                return todo;\n            })\n        default:\n            return state;\n    }\n} */\n\n/* function todoApp(state = initialState, action) {\n    switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n            return Object.assign({}, state, {\n                visibilityFilter: action.filter\n            })\n        case ADD_TODO :\n            return Object.assign({}, state, {\n                todos: [\n                    ...state.todos,\n                    {\n                        text: action.text,\n                        completed: false\n                    }\n                ]\n            })\n        case TOGGLE_TODO :\n            return Object.assign({}, state, {\n                todo: state.todos.map((todo, index) => {\n                    if (index === action.index) {\n                        return Object.assign({}, todo, {\n                            completed: !todo.completed,\n                        })\n                    }\n\n                    return todo;\n                })\n            })\n        default:\n            return state;\n    }\n} */\n\n/* function todoApp(state = initialState, action) {\n    // Пока не обрабатываем никаких экшенов\n    // и просто возвращаем состояние, которое приняли в качестве параметра\n    return state\n} */\n\n/* function todoApp(state, action) {\n    if (typeof state === 'undefined') {\n        return initialState\n    }\n\n    // Пока не обрабатываем никаких экшенов\n    // и просто возвращаем состояние, которое приняли в качестве параметра\n    return state\n} */","import { createStore } from 'redux'\nimport todoApp from './reducers/reducers'\n\n/* Стор (Store) — это объект, который соединяет эти части вместе. Стор берет на себя следующие задачи:\n\nсодержит состояние приложения (application state);\nпредоставляет доступ к состоянию с помощью getState();\nпредоставляет возможность обновления состояния с помощью dispatch(action);\nОбрабатывает отмену регистрации слушателей с помощью функции, возвращаемой subscribe(listener). \n\n\nВажно отметить, что у вас будет только один стор в Redux-приложении. Е\nсли Вы захотите разделить логику обработки данных, то нужно будет использовать композицию редюсеров (reducer composition) \nвместо использования множества сторов (stores).\n\nОчень легко создать стор (Store), если у Вас есть редюсер. \nМы использовали combineReducers() для комбинирования несколько редюсеров в один глобальный редюсер. \nТеперь мы их импортируем и передадим в createStore().\n*/\n\nexport let store = createStore(todoApp)","const Link = ({ active, children, onClick }) => (\n    <button\n      onClick={onClick}\n      disabled={active}\n      style={{\n        marginLeft: '4px'\n      }}\n    >\n      {children}\n    </button>\n  )\n\nexport default Link","import { connect } from \"react-redux\";\nimport { setVisibilityFilter } from \"../../store/actions\"\nimport Link from \"../../components/Link\";\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n","import FilterLink from '../../containers/FilterLink'\nimport { VisibilityFilters } from '../../store/actions'\n\nconst Footer = () => (\n    <div className=\"tasks\">\n        <span>Show: </span>\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n)\n\nexport default Footer","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../store/actions'\n\nlet AddTodo = ({dispatch}) => {\n    let input;\n\n    return (\n<div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          dispatch(addTodo(input.value))\n          input.value = ''\n        }}\n      >\n        <input ref={node => (input = node)} />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n    )\n}\n\n\nexport default connect()(AddTodo)","import React from 'react';\n\nconst Todo = ({ onClick, completed, text }) => (\n    <li\n      onClick={onClick}\n      style={{\n        textDecoration: completed ? 'line-through' : 'none'\n      }}\n    >\n      {text}\n    </li>\n  )\n\nexport default Todo","import Todo from '../Todo'\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul>\n    {todos.map(todo => (\n      <Todo key={todo.id}\n        {...todo}\n        onClick={() => toggleTodo(todo.id)}\n\n      />\n    ))}\n  </ul>\n)\n\nexport default TodoList;","import { connect } from 'react-redux'\nimport { toggleTodo } from '../../store/actions'\nimport TodoList from '../../components/TodoList'\nimport { VisibilityFilters } from '../../store/actions'\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return todos\n        case VisibilityFilters.SHOW_COMPLETED:\n            return todos.filter(t => t.completed)\n        case VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter(t => !t.completed)\n        default:\n            throw new Error('Unknown filter: ' + filter)\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    toggleTodo: id => dispatch(toggleTodo(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList)","import './App.css';\nimport { storeTesting } from './store/storeTesting'\n\nimport Footer from './components/Footer'\nimport AddTodo from './containers/AddTodo'\nimport VisibleTodoList from './containers/VisibleTodoList'\n\nexport default function App() {\n    //uncomment for testing\n    // storeTesting();\n    return (\n        <div>\n            <AddTodo />\n            <VisibleTodoList />\n            <Footer />\n        </div>\n    )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}